#!@PERL@
#  Copyright (C) 2012  Stanislav Sinyagin
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

# Stanislav Sinyagin <ssinyagin@k-open.com>

use strict;
use warnings;

BEGIN { require '@torrus_config_pl@'; require '@siam_config_pl@'; }


use Getopt::Long;
use Sys::Hostname;
use Date::Format;
use Date::Parse;

use Torrus::Log;
use Torrus::SIAM;
use Torrus::ConfigTree;
use Torrus::SiteConfig;
use Torrus::DataAccess;
     

my $server = hostname();

my $debug = 0;
my $verbose = 0;


my $ok = GetOptions( 'server=s'    => \$server,
                     'verbose'     => \$verbose,
                     'debug'       => \$debug );

if( not $ok or scalar( @ARGV ) > 0 )
{
    print STDERR
        ("Usage: $0 [options...]\n",
         "Options:\n",
         " --server=HOSTNAME       Torrus server to match in SIAM [" .
         $server . "]\n",
         " --verbose               print extra information\n",
         " --debug                 print debugging information\n",
         "\n");
    exit 1;
}

if( $debug )
{
    Torrus::Log::setLevel('debug');
}
elsif( $verbose )
{
    Torrus::Log::setLevel('verbose');
}


# Calculate the start of today in local timezone
my $today = str2time(time2str('%Y-%m-%d 00:00', time()));

my $siam = Torrus::SIAM->open();
exit(1) unless defined($siam);

Verbose('Connected to SIAM');


my $devices = $siam->get_contained_objects
    ('SIAM::Device', {'match_attribute' => ['torrus.server', [$server]]});

Verbose('Retrieved ' . scalar(@{$devices}) . ' devices from SIAM');

my $c_devices;
my $c_ports;

# Group devices by torrus.tree attribute
my %tree_devices;
my %error_tree_reported;
foreach my $device (@{$devices})
{
    next unless $device->is_complete();
    next unless $device->attr('snmp.managed');

    my $tree = $device->attr('torrus.tree');
    if( not defined($tree) )
    {
        Error('FATAL: SIAM::Device "' . $device->id .
              '" does not define "torrus.tree" attribute');
        exit(1);
    }

    if( Torrus::SiteConfig::treeExists($tree) )
    {
        if( not defined($tree_devices{$tree}) )
        {
            $tree_devices{$tree} = [];
        }
        
        push(@{$tree_devices{$tree}}, $device);
    }
    else
    {
        if( not $error_tree_reported{$tree} )
        {
            Error('Non-existent tree ' . $tree . ' is referred to ' .
                  'in "torrus.tree" attribute for device ' . $device->id);
            $error_tree_reported{$tree} = 1;
        }
    }
}


foreach my $tree ( sort keys %tree_devices )
{
    my $devices = $tree_devices{$tree};
    Verbose('Tree ' . $tree . ': ' . scalar(@{$devices}) . ' devices');
    
    my $config_tree = new Torrus::ConfigTree( -TreeName => $tree );
    if( not defined($config_tree) )
    {
        Error("Configuration is not ready");
        exit 1;
    }

    foreach my $devobj (@{$devices})
    {
        my $svcunits = $devobj->get_all_service_units();
        foreach my $unit ( @{$svcunits} )
        {
            next unless $unit->is_complete();
            
            my $dataelements = $unit->get_data_elements();
            foreach my $el (@{$dataelements})
            {
                if( $el->attr('siam.svcdata.driver') eq 'Torrus.TimeSeries')
                {
                    fetch_data($config_tree, $el);
                }
            }
            
            $c_ports++;
        }
        
        $c_devices++;
    }

    $config_tree = undef;
}

$siam->disconnect();

Info(sprintf('siam_rrdfetch finished: %d ports on %d devices',
             $c_ports, $c_devices));
exit(0);


sub fetch_data
{
    my $config_tree = shift;
    my $el = shift;

    my $nodeid_prefix = $el->attr('torrus.nodeid');
    if( not defined($nodeid_prefix) )
    {
        Error('SIAM::ServiceDataElement ' . $el->id . ' does not have ' .
              '"torrus.nodeid" attribute');
        return;
    }

    my $prefix_len = length($nodeid_prefix);

    Debug('Fetching data for ' . $nodeid_prefix);

    my $child_nodes = $config_tree->searchNodeidPrefix($nodeid_prefix);
    if( not defined($child_nodes) or scalar(@{$child_nodes}) == 0 )
    {
        Debug('Cannot find Torrus nodes for nodeid prefix ' . $nodeid_prefix);
        return;
    }

    # Aggregation attributes
    my $max_intvl = $el->attr('torrus.fetch.max_intervals');
    if( not defined($max_intvl) )
    {
        $max_intvl = 14;
    }

    my $aggr_intvl = $el->attr('torrus.fetch.aggr_interval');
    if( not defined($aggr_intvl) )
    {
        # by default, we aggregate by 24 hours
        $aggr_intvl = 86400;
    }

    # Timestamp of latest fetched data
    my $latest_available = $el->computable('torrus.fetch.latest_available');

    # timestamp in the past to start fetching from
    my $fetch_start;
    if( defined($latest_available) and
        length($latest_available) > 0 and
        $latest_available > ($today - $aggr_intvl*$max_intvl) )
    {
        $fetch_start = $latest_available + $aggr_intvl;
        # align it to our aggregation schedule
        $fetch_start -= ($today - $latest_available) % $aggr_intvl;
    }
    else
    {
        $fetch_start = $today - $aggr_intvl * $max_intvl;
    }
    
    my $da = new Torrus::DataAccess;

    my $data = {};

    # retrieve data from RRD
    foreach my $item (@{$child_nodes})
    {
        my $token = $item->[1];
        my $nodeid = $item->[0];
        
        if( not $config_tree->isLeaf( $token ) )
        {
            next;
        }

        my $ds_type = $config_tree->getNodeParam( $token, 'ds-type' );
        if( $ds_type ne 'rrd-file' and $ds_type ne 'collector' )
        {
            next;
        }
        
        my $leaf_type = $config_tree->getNodeParam( $token, 'leaf-type' );
        if( $leaf_type ne 'rrd-def' )
        {
            next;
        }

        my $data_accessor = substr($nodeid, $prefix_len + 2);
        my $multiplier = 1.0;

        # convert byte rate into bit rate
        if( $data_accessor =~ /bytes$/o )
        {
            $data_accessor =~ s/bytes$/bits/o;
            $multiplier = 8.0;
        }
        
            
        Debug('Fetching data for ' . $nodeid);
        
        my $file = $config_tree->getNodeParam( $token, 'data-file' );
        my $dir = $config_tree->getNodeParam( $token, 'data-dir' );

        my $rrd_file = $dir . '/' . $file;        
        if( not -r $rrd_file )
        {
            next;
        }
        
        my $ds = $config_tree->getNodeParam( $token, 'rrd-ds' );
        
        my $t_start = $fetch_start;
        my $t_end = $t_start + $aggr_intvl;
        while( $t_end <= $today )
        {
            foreach my $cf ('MAX', 'AVERAGE')
            {
                my ( $ret_val, $ret_time ) =
                    $da->read_RRD_DS( $rrd_file, $cf, $ds, $t_end, $t_start );

                if( defined($ret_val) )
                {
                    $data->{$t_start}{$data_accessor}{$cf} =
                        $ret_val * $multiplier;
                }
            }
            
            $t_start += $aggr_intvl;
            $t_end += $aggr_intvl;
        }
    }

    $el->set_condition('torrus.fetch.data', $data);
}






# Local Variables:
# mode: perl
# indent-tabs-mode: nil
# perl-indent-level: 4
# End:


